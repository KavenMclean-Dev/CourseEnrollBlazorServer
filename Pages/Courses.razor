@page "/courses"
@using CourseEnrollBlazorServer.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject CustomAuthentication AuthStateProvider
@inject NavigationManager NavigationManager

<!-- Alert Container -->
<div class="position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1050; min-width: 450px;">
    @if (showAlert)
    {
        <div class="alert @alertClass alert-dismissible fade show p-3" role="alert">
            <div class="d-flex align-items-center">
                <i class="@alertIcon fs-4 me-3"></i>
                <div>
                    <h5 class="alert-heading mb-1">@alertTitle</h5>
                    <p class="mb-0">@alertMessage</p>
                </div>
                <button type="button" class="btn-close ms-auto" @onclick="HideAlert"></button>
            </div>
        </div>
    }
</div>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0">All Courses</h3>
        @if (currentStudent != null)
        {
            <div class="alert alert-light mb-0 py-2 d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-user-graduate me-2"></i>
                    <strong>Student:</strong> @currentStudent.Name
                </div>
                <button class="btn btn-outline-danger btn-sm" @onclick="Logout">
                    <i class="fas fa-sign-out-alt me-1"></i> Logout
                </button>
            </div>
        }
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 fs-5">Loading courses...</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var course in allCourses)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@course.Title</h5>
                            <p class="card-text text-muted">@course.Description</p>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <span class="badge bg-light text-dark">
                                    <i class="fas fa-users me-1"></i> @(course.Enrollments?.Count ?? 0) enrolled
                                </span>
                                @if (IsEnrolled(course.CourseId))
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check-circle me-1"></i> Enrolled
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="card-footer bg-transparent border-0 pb-3">
                            @if (IsEnrolled(course.CourseId))
                            {
                                <button class="btn btn-danger w-100 py-2" @onclick="() => Deregister(course.CourseId)">
                                    <i class="fas fa-times-circle me-2"></i>Deregister
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-primary w-100 py-2" @onclick="() => Enroll(course.CourseId)">
                                    <i class="fas fa-plus-circle me-2"></i>Enroll
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <h3 class="mb-4 mt-5 pt-3 border-top">My Courses</h3>

    @if (myCourses == null || !myCourses.Any())
    {
        <div class="alert alert-warning py-3">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-triangle fa-lg me-3"></i>
                <div>
                    <h5 class="mb-1">Not Enrolled Yet</h5>
                    <p class="mb-0">You are not enrolled in any courses yet. Select from the courses above to get started.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var course in myCourses)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 border-success shadow-sm">
                        <div class="card-header bg-success text-white py-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle me-2"></i>
                                <h6 class="mb-0">Enrolled</h6>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-success">@course.Title</h5>
                            <p class="card-text">@course.Description</p>
                            <div class="mt-3">
                                <span class="badge bg-light text-dark">
                                    <i class="fas fa-users me-1"></i> @(course.Enrollments?.Count ?? 0) students
                                </span>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent border-0 pb-3">
                            <button class="btn btn-outline-danger w-100 py-2" @onclick="() => Deregister(course.CourseId)">
                                <i class="fas fa-user-minus me-2"></i>Drop Course
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private Student? currentStudent;
    private List<Course> allCourses = new();
    private List<Course> myCourses = new();
    private bool isLoading = true;

    // Alert message variables
    private bool showAlert = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private string alertClass = "";
    private string alertIcon = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var email = user.Identity.Name;
                currentStudent = await Db.Students.FirstOrDefaultAsync(s => s.Email == email);

                if (currentStudent == null)
                {
                    await ShowAlertAsync("Error", "Logged-in student not found in database.", "alert-danger", "fas fa-exclamation-circle");
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    return;
                }

                await LoadDataAsync();
            }
            else
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            await ShowAlertAsync("Error", $"Error loading data: {ex.Message}", "alert-danger", "fas fa-exclamation-circle");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDataAsync()
    {
        allCourses = await Db.Courses.Include(c => c.Enrollments).ToListAsync();

        if (currentStudent != null)
        {
            myCourses = await Db.Enrollments
                .Where(e => e.StudentId == currentStudent.StudentId)
                .Include(e => e.Course)
                .ThenInclude(c => c.Enrollments)
                .Select(e => e.Course)
                .ToListAsync();
        }
    }

    private bool IsEnrolled(int courseId) => myCourses.Any(c => c.CourseId == courseId);

    private async Task Enroll(int courseId)
    {
        if (currentStudent == null || IsEnrolled(courseId)) return;

        try
        {
            var enrollment = new Enrollment
            {
                StudentId = currentStudent.StudentId,
                CourseId = courseId,
            };

            Db.Enrollments.Add(enrollment);
            await Db.SaveChangesAsync();

            var enrolledCourse = allCourses.FirstOrDefault(c => c.CourseId == courseId);
            if (enrolledCourse != null) myCourses.Add(enrolledCourse);

            await ShowAlertAsync("Success", "Successfully enrolled in the course!", "alert-success", "fas fa-check-circle");
        }
        catch (Exception ex)
        {
            await ShowAlertAsync("Error", $"Error enrolling: {ex.Message}", "alert-danger", "fas fa-exclamation-circle");
        }
    }

    private async Task Deregister(int courseId)
    {
        if (currentStudent == null) return;

        try
        {
            var enrollment = await Db.Enrollments
                .FirstOrDefaultAsync(e => e.StudentId == currentStudent.StudentId && e.CourseId == courseId);

            if (enrollment != null)
            {
                Db.Enrollments.Remove(enrollment);
                await Db.SaveChangesAsync();
                myCourses.RemoveAll(c => c.CourseId == courseId);

                await ShowAlertAsync("Dropped", "Successfully dropped the course!", "alert-danger", "fas fa-info-circle");
            }
        }
        catch (Exception ex)
        {
            await ShowAlertAsync("Error", $"Error dropping course: {ex.Message}", "alert-danger", "fas fa-exclamation-circle");
        }
    }

    private async Task Logout()
    {
        AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    private async Task ShowAlertAsync(string title, string message, string alertClass = "alert-primary", string alertIcon = "fas fa-info-circle")
    {
        this.alertTitle = title;
        this.alertMessage = message;
        this.alertClass = alertClass;
        this.alertIcon = alertIcon;
        showAlert = true;

        StateHasChanged();
        await Task.Delay(5000);
        if (showAlert) HideAlert();
    }

    private void HideAlert()
    {
        showAlert = false;
        StateHasChanged();
    }
}
