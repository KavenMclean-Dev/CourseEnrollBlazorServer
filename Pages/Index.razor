@page "/login"
@using Microsoft.AspNetCore.Identity
@using CourseEnrollBlazorServer.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject CustomAuthentication AuthStateProvider

<style>
    .login-bg {
        background: linear-gradient(135deg, #1C2228, #10247A, #6B3FA0);
        min-height: 100vh;
    }

    .login-card {
        max-width: 400px;
        width: 100%;
        border-radius: 1rem;
        box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        transition: transform 0.2s ease-in-out;
    }

        .login-card:hover {
            transform: translateY(-5px);
        }

    .form-control:focus {
        box-shadow: 0 0 5px rgba(100,150,250,0.5);
        border-color: #6496fa;
    }
</style>

<div class="d-flex justify-content-center align-items-center vh-100 login-bg">
    <div class="card shadow-lg p-4 login-card">
        <div class="text-center mb-4">
            <i class="bi bi-box-arrow-in-right display-4 text-primary"></i>
            <h3 class="mt-2">Login</h3>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show">
                <i class="bi bi-exclamation-circle me-2"></i>
                @ErrorMessage
                <button type="button" class="btn-close" @onclick="() => ErrorMessage = null"></button>
            </div>
        }

        @if (showSuccess)
        {
            <div class="alert alert-success alert-dismissible fade show">
                <i class="bi bi-check-circle me-2"></i> Login successful! Redirecting...
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Email</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                    <InputText class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                </div>
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <div class="input-group">
                    <InputText class="form-control" type="@passwordFieldType" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePassword">
                        <i class="bi @(passwordFieldType == "password" ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Login
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <a href="/register" class="text-decoration-none">Don't have an account? Register</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;
    private bool isSubmitting = false;
    private bool showSuccess = false;
    private string passwordFieldType = "password";

    private class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        ErrorMessage = null;
        isSubmitting = true;

        try
        {
            // Attempt login using custom authentication
            var success = await AuthStateProvider.LoginAsync(loginModel.Email, loginModel.Password);

            if (!success)
            {
                ErrorMessage = "Invalid email or password.";
                return;
            }

            // Ensure the linked Student exists
            var student = await DbContext.Students.FirstOrDefaultAsync(s => s.Email == loginModel.Email);
            if (student == null)
            {
                ErrorMessage = "Logged-in student not found in database.";
                return;
            }

            showSuccess = true;
            StateHasChanged();

            // Short delay to show success alert
            await Task.Delay(1000);

            NavigationManager.NavigateTo("/courses");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void TogglePassword()
    {
        passwordFieldType = passwordFieldType == "password" ? "text" : "password";
    }
}
