@page "/register"
@using Microsoft.AspNetCore.Identity
@using CourseEnrollBlazorServer.Data
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject CustomAuthentication AuthStateProvider

<style>
    .register-bg {
        background: linear-gradient(135deg, #1C2228, #10247A, #48247B);
        min-height: 100vh;
    }

    .register-card {
        max-width: 450px;
        width: 100%;
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        background-color: rgba(255,255,255,0.95);
    }
</style>

<div class="register-bg d-flex justify-content-center align-items-center vh-100">
    <div class="card register-card p-4">
        <div class="text-center mb-4">
            <i class="bi bi-person-plus-fill display-4 text-primary"></i>
            <h3 class="mt-2 fw-bold">Create Account</h3>
            <p class="text-muted small">Sign up to access your courses</p>
        </div>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show">
                @SuccessMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show">
                @ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="registerModel.Name" />
                <ValidationMessage For="@(() => registerModel.Name)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText class="form-control" @bind-Value="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" class="form-control" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn w-100 fw-bold text-white" style="background: linear-gradient(135deg, #10247A, #48247B);">
                Register
            </button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? ErrorMessage;
    private string? SuccessMessage;

    private class RegisterModel
    {
        [Required] public string Name { get; set; } = string.Empty;
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;
        [Required, MinLength(6)] public string Password { get; set; } = string.Empty;
    }

    private async Task HandleRegister()
    {
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            // 1. Create IdentityUser
            var identityUser = new IdentityUser
            {
                UserName = registerModel.Email,
                Email = registerModel.Email
            };

            var result = await UserManager.CreateAsync(identityUser, registerModel.Password);

            if (!result.Succeeded)
            {
                ErrorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
                return;
            }

            // 2. Create Student entity and link IdentityUserId
            var student = new Student
            {
                Name = registerModel.Name,
                Email = registerModel.Email,
                IdentityUserId = identityUser.Id
            };

            DbContext.Students.Add(student);
            await DbContext.SaveChangesAsync();

            // 3. Optionally, log the user in automatically
            await AuthStateProvider.LoginAsync(registerModel.Email, registerModel.Password);

            SuccessMessage = "Registration successful!" + " Weclome " + student.Name + "\nPlease Login to see your enrolled courses";
            StateHasChanged();

            await Task.Delay(1500);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Registration failed: {ex.Message}";
        }
    }
}
